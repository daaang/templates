#!/usr/bin/env bash
USAGE="usage: $0 [-h] FILE_NAME [RUN_TYPE]"
RUN_TYPE="bash"

# Colorful logging.
echogood() { echo "[1;32m *[0m $@"; }
echowarn() { echo "[1;33m *[0m $@"; }
echobad()  { echo "[1;31m *[0m $@"; }

# Echo an optional error message, then show expected usage and
# exit an error status code.
errorout() {
  [ -n "$1" ] && echobad "$@"
  echo "$USAGE"
  exit 1
}

# Echo the expected usage along with a detailed help message.
printhelp() {
  cat <<EOF
$USAGE

Create an executable with an appropriate shebang. Will immediately begin
editing with \$VISUAL or \$EDITOR if either are set.

If FILE_NAME already exists, we'll immediately start editing it with
your preferred editor (without otherwise modifying the file in any way).

positional arguments:
 FILE_NAME    path to the new script
 RUN_TYPE     type to put in the shebang (default: $RUN_TYPE)

optional arguments:
 -h           show this help message and exit

current environment (if you're curious):
 \$VISUAL:     \`$VISUAL'
 \$EDITOR:     \`$EDITOR'
EOF
}

# Parse any arguments. Put a colon after any options that expect
# $OPTARGs to follow. The colon at the start is unrelated.
while getopts ":h" opt; do
  case "$opt" in
    h)
      # Just print the help message and exit happily.
      printhelp
      exit 0
      ;;

    # Additional options go here.

    ?)
      # Don't tolerate unrecognized options.
      errorout "unrecognized option: \`-$OPTARG'"
      ;;
  esac
done

# Shift so that the first "real" argument is $1.
shift $((OPTIND - 1))

# Be sure we have at least one argument.
if [ -z "$1" ]; then
  errorout "expected at least one argument"
fi

# Here's what we expect from the command line.
filename="$1"
runtype="${2:-$RUN_TYPE}"

if ! [ -e "$filename" ]; then
  # If the file doesn't already exist, then we take a look at our run
  # type.
  if [ "${runtype:0:1}" = "/" ]; then
    # If the run type begins with a slash, then we'll assume it's an
    # absolute path and check for existance.
    if [ -e "$runtype" ]; then
      # Cool! We set the shebang to that exactly.
      echo "#!$runtype" > "$filename"

    else
      # Otherwise, we error out. I'm not going to do anything
      # exceptional for absolute shebangs that won't work.
      errorout "Absolute path does not exist: $runtype"
    fi

  else
    # If the run type doesn't begin with a slash, then check whether we
    # have a template for it in particular.
    case "$runtype" in
      "bash")
        # I like my bash scripts to have colorful logging, basic
        # argument parsing, and a help printout.
        cat <<- EOSF > "$filename"
	#!/usr/bin/env $runtype
	USAGE="usage: \$0 [-h] OTHER_ARGS_ETC"

	# Colorful logging.
	echogood() { echo "[1;32m *[0m \$@"; }
	echowarn() { echo "[1;33m *[0m \$@"; }
	echobad()  { echo "[1;31m *[0m \$@"; }

	# Echo an optional error message, then show expected usage and
	# exit an error status code.
	errorout() {
	  [ -n "\$1" ] && echobad "\$@"
	  echo "\$USAGE"
	  exit 1
	}

	# Echo the expected usage along with a detailed help message.
	printhelp() {
	  cat <<EOF
	\$USAGE

	Description of whatever this does.

	positional arguments:
	 ARG_NAME     what's this argument about
	 ANOTHER_ARG  maybe this one's optional (default: \$ANOTHER_ARG)

	optional arguments:
	 -h           show this help message and exit
	EOF
	}

	# Parse any arguments. Put a colon after any options that expect
	# \$OPTARGs to follow. The colon at the start is unrelated.
	while getopts ":h" opt; do
	  case "\$opt" in
	    h)
	      # Just print the help message and exit happily.
	      printhelp
	      exit 0
	      ;;

	    # Additional options go here.

	    ?)
	      # Don't tolerate unrecognized options.
	      errorout "unrecognized option: \\\`-\$OPTARG'"
	      ;;
	  esac
	done

	# Shift so that the first "real" argument is \$1.
	shift \$((OPTIND - 1))

	# Your code begins here.
	EOSF
        ;;

      "python3")
        # I like my python scripts to be ready-to-go with argument
        # parsing.
        cat <<- EOSF > "$filename"
	#!/usr/bin/env $runtype
	from argparse           import  ArgumentParser

	DETAILED_DESCRIPTION = """\\
	This will show up on the help screen."""

	# Your classes and functions go here.

	# Prep the argument parser.
	parser  = ArgumentParser(description = DETAILED_DESCRIPTION)

	# The two arguments here are just examples to remind you how to
	# use argparse.
	parser.add_argument("integers",
	                    metavar = "N",
	                    type    = int,
	                    nargs   = "+",
	                    help    = "any number of integers")
	parser.add_argument("-s", "--sum",
	                    dest    = "accumulate",
	                    action  = "store_const",
	                    const   = sum,
	                    default = max,
	                    help    = "sum the integers (default: max)")

	# Parse the actual arguments.
	args    = parser.parse_args()

	# Replace this with your own code. As are the arguments above,
	# this exists only to serve as an example.
	print(args.accumulate(args.integers))
	EOSF
        ;;

      *)
        # I haven't made templates for anything else yet.
        echo "#!/usr/bin/env $runtype" > "$filename"
        ;;
    esac
  fi

  # Regardless of whether we used an absolute or environmental shebang,
  # the new file should be executable.
  chmod +x "$filename"
fi

# Regardless of whether we created a new file or it already existed,
# we'll try to open it in an editor.
if [ -n "$VISUAL" -a -e "$VISUAL" ]; then
  # We try VISUAL first.
  exec "$VISUAL" "$filename"

elif [ -n "$EDITOR" -a -e "$EDITOR" ]; then
  # We try EDITOR second.
  exec "$EDITOR" "$filename"

else
  # We have no third try; we simply exit cleanly.
  echogood "Created $filename (or it already exists)"
  echowarn "Couldn't find \$VISUAL or \$EDITOR; exiting without editing"
fi
