#!/usr/bin/env bash
# I don't write anything complicated enough to require anything very
# complicated with autotools, but I prefer to use autotools anyway just
# to conform to the make conventions that everyone is used to. I wrote
# this so that I don't have to actually remember how any of that works.
# Also, this keeps the toys off the lawn, so to speak, allowing me to
# contain all my autotools stuff in one small file.

########################################################################
######################### Required Parameters ##########################
########################################################################

# With substantial editing, you could add more configuration files and
# more directories and whatever else you could possibly want, I guess. I
# mean go nuts. But if you're just trying to compile a program by typing
# "make" with basically no configuration options, then hey, whammo,
# check out this ready-made script.

# Put the program name here. Also its version.
PROGNAME="executable_name"
PROGVERSION="0.0.1"

# The latter of these two is the all-important file list of files to
# compile in src/. The former is just one of those files, used to point
# autotools at the src/ directory (for some reason, it needs a file
# instead of just the directory). I feel like main.c is a filename that
# will probably appear in any project.
MAINSOURCE="main.c"
PROGSOURCES="${MAINSOURCE} others_if_any.c"

# These are the headers that should be installed in the system.
REQUIRED_HEADERS="string.h unistd.h"

# This is what we'll call the configuration header. By default, it's
# config.h, which also creates config.h.in, and it's hell on tab
# completion with the ./configure script. So I go with localconf.h.
CONFIG_HEADERS="localconf.h"

########################################################################
########################### Remaining Setup ############################
########################################################################

# The autotools love creating and just going crazy with filling up
# autom4te.cache/, and I mean, whatever, who cares. It's the first thing
# I'll delete, when this is over. I'll be deleting a few other files,
# but I'll get to those later.
AC_FILES=("autom4te.cache")

# Logging.
echogood() { echo "[1;32m *[0m $@"; }
echowarn() { echo "[1;33m *[0m $@"; }
echobad()  { echo "[1;31m *[0m $@"; }

mkacfile() {
  echogood "Creating ${1} ..."

  # This function expects file contents passed as heredocs through
  # stdin. That input will be used up by cat here and output to the
  # filename given as a first argument.
  cat > "$1"

  # We'll want to delete this file later, so we add it to our array.
  AC_FILES=("${AC_FILES[@]}" "$1")
}

if [ "$1" != "I know what I'm doing" ]; then
  # I don't want anybody accidentally running this just to see what it
  # does, so I added this easily-found required argument.
  echobad "You probably shouldn't run scripts without looking to see"
  echobad "what they do first."
  exit 1
fi

########################################################################
###################### Make the .am and .ac files ######################
########################################################################

# The main makefile only has the one subdir.
mkacfile "Makefile.am" <<- EOF
	SUBDIRS	= src
EOF

# The source makefile only needs to make a single binary.
mkacfile "src/Makefile.am" <<- EOF
	bin_PROGRAMS		= ${PROGNAME}
	${PROGNAME}_SOURCES	= ${PROGSOURCES:-main.c}
EOF

# Here's the complicated part.
mkacfile "configure.ac" <<- EOF
	# I made this with 2.69 in mind.
	AC_PREREQ([2.69])

	# Package string.
	AC_INIT([${PROGNAME}], [${PROGVERSION}])

	# Foreign gets rid of annoying README etc. requirements. They're
	# annoying because I already have README.md; I'm not adding one
	# with no extension. That's asenine.
	AM_INIT_AUTOMAKE([foreign -Wall -Werror])

	# Here's a file in the src directory.
	AC_CONFIG_SRCDIR([src/${MAINSOURCE:-main.c}])

	# Calling this config.h makes for annoying tab completion.
	AC_CONFIG_HEADERS([${CONFIG_HEADERS:-localconf.h}])

	# I'll be creating these as well as localconf.h.
	AC_CONFIG_FILES([Makefile src/Makefile])

	# Without this, autoconf would be required for anyone trying to
	# run make. Which kinda defeats the purpose?
	AM_MAINTAINER_MODE([disable])

	# All I need is CC.
	AC_PROG_CC

	# Checks for header files.
	AC_CHECK_HEADERS([${REQUIRED_HEADERS}])

	# Checks for typedefs, structures, and compiler characteristics.
	AC_TYPE_SIZE_T

	# Wrap it up!
	AC_OUTPUT
EOF

########################################################################
############################ Autoconf calls ############################
########################################################################

# I don't remember why this needs to happen. I'm not sure what it does.
# I hope it's actually required, because I sure did write it here.
echogood "Generating aclocal.m4 ..."
if ! aclocal; then
  echobad "Couldn't make aclocal.m4 file."
  exit 1
fi

# If there's anything that goes into localconf.h.in, I guess that'll
# happen here. I guess?? I don't know anything about config.h setup
# right now, so pls leave me alone.
echogood "Generating localconf.h.in ..."
if ! autoheader; then
  echobad "Couldn't make localconf.h.in file."
  exit 1
fi

# This not only creates Makefile.in files but also copies the four
# required scripts (compile, depcomp, install-sh, and missing) in their
# entirety. The `-c` flag installs complete copies rather than symlinks
# to make this stand better on its own.
echogood "Generating Makefile.in files and required scripts ..."
if ! automake -ac; then
  echobad "Couldn't make Makefile.in files."
  exit 1
fi

# This is what it's all for. Right here. Wowza bo bowza.
echogood "Generating ./configure ..."
if ! autoconf; then
  echobad "Couldn't make ./configure file."
  exit 1
fi

# Finally, get rid of the files the user definitely will not need.
echogood "Removing temporary autoconf files ..."
if ! rm -r "${AC_FILES[@]}"; then
  echobad "Couldn't remove temporary files."
  exit 1
fi

# And hey if we made it here, then I guess we're all set.
echogood "Prepped and ready: ${PROGNAME} $PROGVERSION"
